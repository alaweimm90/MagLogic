# MuMax3 Simulation Environment for MagLogic
# UC Berkeley Nanomagnetic Logic Research
# 
# This container provides MuMax3 with GPU acceleration for high-performance
# micromagnetic simulations with Python analysis tools.

FROM nvidia/cuda:11.8-devel-ubuntu22.04

# Metadata
LABEL maintainer="Dr. Meshal Alawein <meshal@berkeley.edu>"
LABEL description="MuMax3 simulation environment for MagLogic nanomagnetic logic simulations"
LABEL version="1.0.0"
LABEL repository="https://github.com/alaweimm90/MagLogic"

# Environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV CUDA_ROOT=/usr/local/cuda
ENV PATH=${CUDA_ROOT}/bin:${PATH}
ENV LD_LIBRARY_PATH=${CUDA_ROOT}/lib64:${LD_LIBRARY_PATH}
ENV MUMAX3_ROOT=/opt/mumax3
ENV PATH=${MUMAX3_ROOT}:${PATH}

# Install system dependencies
RUN apt-get update && apt-get install -y \
    # Build tools
    build-essential \
    git \
    wget \
    curl \
    unzip \
    # Go programming language
    golang-go \
    # GPU utilities
    nvidia-utils-525 \
    # Python and scientific libraries
    python3 \
    python3-pip \
    python3-dev \
    # Graphics and visualization
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    # Additional utilities
    vim \
    htop \
    && rm -rf /var/lib/apt/lists/*

# Set up Python environment
RUN python3 -m pip install --upgrade pip setuptools wheel

# Install Python scientific stack
RUN pip install \
    numpy>=1.21.0 \
    scipy>=1.7.0 \
    matplotlib>=3.5.0 \
    pandas>=1.3.0 \
    h5py>=3.2.0 \
    pillow>=8.3.0 \
    plotly>=5.0.0 \
    jupyter>=1.0.0 \
    ipywidgets>=7.6.0 \
    tqdm>=4.61.0 \
    pyyaml>=5.4.0

# Install MuMax3
WORKDIR /tmp
RUN git clone https://github.com/mumax/3.git mumax3-source && \
    cd mumax3-source && \
    # Build MuMax3
    go build -o mumax3 && \
    # Install to system location
    mkdir -p ${MUMAX3_ROOT} && \
    cp mumax3 ${MUMAX3_ROOT}/ && \
    cp -r examples ${MUMAX3_ROOT}/ && \
    # Cleanup
    cd / && rm -rf /tmp/mumax3-source

# Verify MuMax3 installation
RUN mumax3 -version

# Create working directories
RUN mkdir -p /workspace/simulations \
             /workspace/results \
             /workspace/scripts \
             /workspace/data

# Set up MagLogic Python package
WORKDIR /workspace
COPY python/ ./maglogic/
COPY mumax3/ ./mumax3_files/
COPY requirements.txt ./

# Install MagLogic package
RUN pip install -e ./maglogic/

# Create MuMax3 simulation runner script
RUN cat > /usr/local/bin/run-mumax3 << 'EOF'
#!/bin/bash
set -e

echo "=== MuMax3 Simulation Runner ==="
echo "MagLogic Nanomagnetic Logic Simulation Suite"
echo "UC Berkeley - Dr. Meshal Alawein"
echo ""

# Check GPU availability
echo "Checking GPU availability..."
if command -v nvidia-smi &> /dev/null; then
    nvidia-smi --query-gpu=name,memory.total,memory.free --format=csv,noheader,nounits
else
    echo "Warning: nvidia-smi not found. GPU may not be available."
fi
echo ""

# Check MuMax3
echo "MuMax3 version:"
mumax3 -version
echo ""

# Run simulation if file provided
if [ $# -eq 0 ]; then
    echo "Usage: run-mumax3 <simulation.mx3> [output_dir]"
    echo ""
    echo "Available example simulations:"
    ls -la /workspace/mumax3_files/*/
else
    SIMULATION_FILE=$1
    OUTPUT_DIR=${2:-/workspace/results}
    
    echo "Running simulation: $SIMULATION_FILE"
    echo "Output directory: $OUTPUT_DIR"
    
    # Create output directory
    mkdir -p "$OUTPUT_DIR"
    cd "$OUTPUT_DIR"
    
    # Run MuMax3 simulation
    time mumax3 "$SIMULATION_FILE"
    
    echo ""
    echo "Simulation completed successfully!"
    echo "Results saved to: $OUTPUT_DIR"
    
    # List output files
    echo ""
    echo "Generated files:"
    ls -la *.ovf *.txt 2>/dev/null || echo "No output files found"
fi
EOF

RUN chmod +x /usr/local/bin/run-mumax3

# Create Python analysis runner script
RUN cat > /usr/local/bin/analyze-mumax3 << 'EOF'
#!/bin/bash
set -e

echo "=== MuMax3 Results Analysis ==="
echo "MagLogic Analysis Suite"
echo ""

RESULTS_DIR=${1:-/workspace/results}

echo "Analyzing results in: $RESULTS_DIR"

python3 << PYTHON_SCRIPT
import sys
sys.path.append('/workspace/maglogic')

from maglogic.parsers import MuMax3Parser
from maglogic.analysis.magnetization import MagnetizationAnalyzer
import os
from pathlib import Path

def analyze_simulation_results(results_dir):
    results_path = Path(results_dir)
    
    if not results_path.exists():
        print(f"Error: Results directory {results_dir} does not exist")
        return
    
    parser = MuMax3Parser(verbose=True)
    analyzer = MagnetizationAnalyzer()
    
    print("Searching for simulation results...")
    
    # Look for table.txt
    table_file = results_path / "table.txt"
    if table_file.exists():
        print(f"Found table file: {table_file}")
        try:
            table_data = parser.parse_table(table_file)
            print(f"Table data: {table_data['metadata']['num_rows']} rows, {table_data['metadata']['num_columns']} columns")
        except Exception as e:
            print(f"Error parsing table: {e}")
    
    # Look for OVF files
    ovf_files = list(results_path.glob("*.ovf"))
    print(f"Found {len(ovf_files)} OVF files")
    
    for ovf_file in ovf_files[:3]:  # Analyze first 3 files
        print(f"\\nAnalyzing: {ovf_file.name}")
        try:
            analysis = analyzer.analyze_ovf_file(ovf_file)
            
            # Print summary
            domain_info = analysis.get('domain_analysis', {})
            print(f"  - Domains: {domain_info.get('num_domains', 'unknown')}")
            
            energy_info = analysis.get('energy_analysis', {})
            if 'total_energy' in energy_info:
                total_e = energy_info['total_energy'].get('total', 0)
                print(f"  - Total energy: {total_e:.2e} J")
            
            topo_info = analysis.get('topological_analysis', {})
            print(f"  - Topological defects: {topo_info.get('num_topological_defects', 0)}")
            
        except Exception as e:
            print(f"  Error analyzing {ovf_file.name}: {e}")
    
    print(f"\\nAnalysis complete. Check {results_dir} for detailed results.")

if __name__ == "__main__":
    analyze_simulation_results("$RESULTS_DIR")
PYTHON_SCRIPT
EOF

RUN chmod +x /usr/local/bin/analyze-mumax3

# Create Jupyter startup script
RUN cat > /usr/local/bin/start-jupyter << 'EOF'
#!/bin/bash
set -e

echo "=== Starting Jupyter Lab ==="
echo "MagLogic Interactive Analysis Environment"
echo ""

# Create notebook directory
mkdir -p /workspace/notebooks

# Start Jupyter Lab
jupyter lab \
    --ip=0.0.0.0 \
    --port=8888 \
    --no-browser \
    --allow-root \
    --notebook-dir=/workspace \
    --ServerApp.token='' \
    --ServerApp.password='' \
    --ServerApp.allow_origin='*' \
    --ServerApp.allow_remote_access=True
EOF

RUN chmod +x /usr/local/bin/start-jupyter

# Create example notebook
RUN mkdir -p /workspace/notebooks
RUN cat > /workspace/notebooks/MuMax3_Analysis_Example.ipynb << 'EOF'
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MuMax3 Simulation Analysis with MagLogic\n",
    "\n",
    "This notebook demonstrates how to analyze MuMax3 simulation results using the MagLogic analysis suite.\n",
    "\n",
    "**UC Berkeley Nanomagnetic Logic Research**  \n",
    "**Dr. Meshal Alawein**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from pathlib import Path\n",
    "\n",
    "# Import MagLogic modules\n",
    "from maglogic.parsers import MuMax3Parser\n",
    "from maglogic.analysis.magnetization import MagnetizationAnalyzer\n",
    "\n",
    "print(\"MagLogic modules imported successfully!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initialize parser and analyzer\n",
    "parser = MuMax3Parser(verbose=True)\n",
    "analyzer = MagnetizationAnalyzer()\n",
    "\n",
    "# Set results directory\n",
    "results_dir = Path('/workspace/results')\n",
    "print(f\"Looking for results in: {results_dir}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Parse table.txt file\n",
    "table_file = results_dir / 'table.txt'\n",
    "\n",
    "if table_file.exists():\n",
    "    table_data = parser.parse_table(table_file)\n",
    "    print(f\"Table data loaded: {table_data['metadata']['num_rows']} rows\")\n",
    "    \n",
    "    # Plot time series\n",
    "    time_series = table_data['time_series']\n",
    "    \n",
    "    if 't' in time_series:\n",
    "        time = time_series['t']\n",
    "        \n",
    "        fig, axes = plt.subplots(2, 2, figsize=(12, 8))\n",
    "        \n",
    "        # Plot magnetization components\n",
    "        for i, component in enumerate(['mx', 'my', 'mz']):\n",
    "            if component in time_series:\n",
    "                ax = axes[i//2, i%2]\n",
    "                ax.plot(time, time_series[component])\n",
    "                ax.set_xlabel('Time (s)')\n",
    "                ax.set_ylabel(f'<{component}>')\n",
    "                ax.set_title(f'Average {component.upper()}')\n",
    "                ax.grid(True)\n",
    "        \n",
    "        # Plot total energy if available\n",
    "        energy_keys = [k for k in time_series.keys() if 'E_total' in k or 'energy' in k.lower()]\n",
    "        if energy_keys:\n",
    "            ax = axes[1, 1]\n",
    "            ax.plot(time, time_series[energy_keys[0]])\n",
    "            ax.set_xlabel('Time (s)')\n",
    "            ax.set_ylabel('Energy (J)')\n",
    "            ax.set_title('Total Energy')\n",
    "            ax.grid(True)\n",
    "        \n",
    "        plt.tight_layout()\n",
    "        plt.show()\n",
    "else:\n",
    "    print(\"No table.txt file found. Run a MuMax3 simulation first.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Analyze OVF files\n",
    "ovf_files = sorted(results_dir.glob('*.ovf'))\n",
    "print(f\"Found {len(ovf_files)} OVF files\")\n",
    "\n",
    "if ovf_files:\n",
    "    # Analyze the last (final) OVF file\n",
    "    final_ovf = ovf_files[-1]\n",
    "    print(f\"Analyzing final state: {final_ovf.name}\")\n",
    "    \n",
    "    analysis = analyzer.analyze_ovf_file(final_ovf)\n",
    "    \n",
    "    # Print analysis summary\n",
    "    print(\"\\n=== Analysis Summary ===\")\n",
    "    \n",
    "    domain_info = analysis.get('domain_analysis', {})\n",
    "    print(f\"Number of domains: {domain_info.get('num_domains', 'unknown')}\")\n",
    "    print(f\"Average domain size: {domain_info.get('average_domain_size', 0):.0f} cells\")\n",
    "    \n",
    "    energy_info = analysis.get('energy_analysis', {})\n",
    "    if 'total_energy' in energy_info:\n",
    "        total_e = energy_info['total_energy'].get('total', 0)\n",
    "        print(f\"Total energy: {total_e:.2e} J\")\n",
    "    \n",
    "    topo_info = analysis.get('topological_analysis', {})\n",
    "    print(f\"Topological defects: {topo_info.get('num_topological_defects', 0)}\")\n",
    "    \n",
    "    # Create visualization\n",
    "    fig = analyzer.plot_magnetization_map(analysis, component='mz')\n",
    "    plt.show()\n",
    "else:\n",
    "    print(\"No OVF files found. Run a MuMax3 simulation first.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running MuMax3 Simulations\n",
    "\n",
    "To run a MuMax3 simulation, use the terminal command:\n",
    "\n",
    "```bash\n",
    "run-mumax3 /workspace/mumax3_files/basic/single_triangle.mx3\n",
    "```\n",
    "\n",
    "Then re-run the analysis cells above to examine the results."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
EOF

# Set working directory
WORKDIR /workspace

# Expose Jupyter port
EXPOSE 8888

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD mumax3 -version || exit 1

# Default command
CMD ["bash", "-c", "echo 'MuMax3 MagLogic Container Started' && echo 'Available commands:' && echo '  run-mumax3 <file.mx3>    - Run MuMax3 simulation' && echo '  analyze-mumax3 [dir]     - Analyze results' && echo '  start-jupyter            - Start Jupyter Lab' && echo '' && exec bash"]