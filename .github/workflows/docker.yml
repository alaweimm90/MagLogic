name: Docker Build and Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docker/**'
      - 'python/**'
      - '.github/workflows/docker.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker/**'
      - 'python/**'
  schedule:
    # Rebuild images weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}/maglogic

jobs:
  # Build matrix for all Docker images
  build-matrix:
    name: Generate Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate matrix
      id: set-matrix
      run: |
        # Find all Dockerfiles
        dockerfiles=$(find docker/ -name "Dockerfile.*" -type f | sort)
        
        matrix_json="["
        first=true
        for dockerfile in $dockerfiles; do
          image_name=$(basename "$dockerfile" | sed 's/Dockerfile\.//')
          
          if [ "$first" = true ]; then
            first=false
          else
            matrix_json="$matrix_json,"
          fi
          
          matrix_json="$matrix_json{\"dockerfile\":\"$dockerfile\",\"image\":\"$image_name\"}"
        done
        matrix_json="$matrix_json]"
        
        echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
        echo "Generated matrix: $matrix_json"

  # Build and test Docker images
  build-test:
    name: Build and Test
    needs: build-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.build-matrix.outputs.matrix) }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_PREFIX }}-${{ matrix.image }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ matrix.image }}
        cache-to: type=gha,mode=max,scope=${{ matrix.image }}
        load: true
    
    - name: Test image basic functionality
      run: |
        image_tag=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "Testing image: $image_tag"
        
        case "${{ matrix.image }}" in
          "analysis")
            echo "Testing analysis image..."
            docker run --rm "$image_tag" python3 -c "
import maglogic
from maglogic.parsers import OOMMFParser, MuMax3Parser
from maglogic.analysis.magnetization import MagnetizationAnalyzer
print('✅ MagLogic analysis environment OK')
"
            
            # Test command line tools
            docker run --rm "$image_tag" maglogic-analyze help
            ;;
            
          "mumax3")
            echo "Testing MuMax3 image..."
            docker run --rm "$image_tag" bash -c "
mumax3 -version
python3 -c 'import maglogic; print(\"✅ MuMax3 environment OK\")'
"
            ;;
            
          "docs")
            echo "Testing documentation image..."
            docker run --rm "$image_tag" python3 -c "
import sphinx
import maglogic
print('✅ Documentation environment OK')
"
            
            # Test documentation build
            docker run --rm -v $PWD/test-docs:/workspace/build "$image_tag" build-docs
            if [ -d "test-docs/html/index.html" ]; then
              echo "✅ Documentation builds successfully"
            else
              echo "❌ Documentation build failed"
              exit 1
            fi
            ;;
            
          *)
            echo "Testing generic image..."
            docker run --rm "$image_tag" python3 -c "print('✅ Image runs successfully')"
            ;;
        esac
    
    - name: Test image security
      run: |
        image_tag=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        
        # Check for running processes that shouldn't be there
        echo "Checking for unnecessary running processes..."
        processes=$(docker run --rm "$image_tag" ps aux | wc -l)
        if [ "$processes" -gt 10 ]; then
          echo "⚠️  Warning: Many processes running ($processes)"
          docker run --rm "$image_tag" ps aux
        else
          echo "✅ Clean process list"
        fi
        
        # Check file permissions
        echo "Checking critical file permissions..."
        docker run --rm "$image_tag" ls -la /etc/passwd /etc/shadow /etc/sudoers 2>/dev/null || echo "✅ Sensitive files properly protected"
    
    - name: Test image size
      run: |
        image_tag=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        
        size=$(docker image inspect "$image_tag" --format='{{.Size}}')
        size_mb=$((size / 1024 / 1024))
        
        echo "Image size: ${size_mb} MB"
        
        # Size warnings based on image type
        case "${{ matrix.image }}" in
          "analysis")
            if [ "$size_mb" -gt 2000 ]; then
              echo "⚠️  Warning: Analysis image is quite large (${size_mb} MB)"
            fi
            ;;
          "mumax3")
            if [ "$size_mb" -gt 5000 ]; then
              echo "⚠️  Warning: MuMax3 image is quite large (${size_mb} MB)"
            fi
            ;;
          "docs")
            if [ "$size_mb" -gt 1000 ]; then
              echo "⚠️  Warning: Docs image is quite large (${size_mb} MB)"
            fi
            ;;
        esac
        
        echo "## Docker Image Size: ${{ matrix.image }}" >> $GITHUB_STEP_SUMMARY
        echo "**Size:** ${size_mb} MB" >> $GITHUB_STEP_SUMMARY
    
    - name: Push image to registry
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ matrix.image }}
        cache-to: type=gha,mode=max,scope=${{ matrix.image }}

  # Integration tests with multiple images
  integration-test:
    name: Integration Test
    needs: [build-matrix, build-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build analysis image for testing
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.analysis
        push: false
        tags: maglogic-analysis:test
        cache-from: type=gha,scope=analysis
        load: true
    
    - name: Create test simulation data
      run: |
        mkdir -p test-data
        
        # Create a simple OVF test file
        cat > test-data/test.ovf << 'EOF'
# OOMMF OVF 2.0
# Segment count: 1
# Begin: Segment
# Begin: Header
# Title: Integration test magnetization
# meshtype: rectangular
# meshunit: m
# xnodes: 5
# ynodes: 5
# znodes: 1
# xstepsize: 2e-9
# ystepsize: 2e-9
# zstepsize: 1e-9
# xmin: 0
# ymin: 0
# zmin: 0
# xmax: 8e-9
# ymax: 8e-9
# zmax: 0
# valuedim: 3
# valueunit: A/m
# valuemultiplier: 8.6e5
# End: Header
# Begin: Data Text
1.0 0.0 0.0
0.707 0.707 0.0
0.0 1.0 0.0
-0.707 0.707 0.0
-1.0 0.0 0.0
0.707 -0.707 0.0
0.0 -1.0 0.0
-0.707 -0.707 0.0
1.0 0.0 0.0
0.707 0.707 0.0
0.0 1.0 0.0
-0.707 0.707 0.0
-1.0 0.0 0.0
0.707 -0.707 0.0
0.0 -1.0 0.0
-0.707 -0.707 0.0
1.0 0.0 0.0
0.707 0.707 0.0
0.0 1.0 0.0
-0.707 0.707 0.0
-1.0 0.0 0.0
0.707 -0.707 0.0
0.0 -1.0 0.0
-0.707 -0.707 0.0
1.0 0.0 0.0
# End: Data Text
# End: Segment
EOF
    
    - name: Run integration tests
      run: |
        echo "Running MagLogic integration tests..."
        
        # Test analysis container with real data
        docker run --rm \
          -v $PWD/test-data:/workspace/data \
          -v $PWD/integration-results:/workspace/results \
          maglogic-analysis:test \
          bash -c "
            maglogic-analyze ovf /workspace/data/test.ovf
            echo 'Integration test completed successfully!'
          "
        
        # Verify results were generated
        if [ -f "integration-results/test_analysis.png" ]; then
          echo "✅ Analysis visualization generated"
        else
          echo "ℹ️  No visualization file found (expected for headless environment)"
        fi
        
        echo "✅ Integration tests passed!"

  # Security scanning
  security-scan:
    name: Security Scan
    needs: build-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.build-matrix.outputs.matrix) }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        push: false
        tags: maglogic-${{ matrix.image }}:scan
        load: true
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: maglogic-${{ matrix.image }}:scan
        format: 'sarif'
        output: 'trivy-results-${{ matrix.image }}.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.image }}.sarif'
        category: 'trivy-${{ matrix.image }}'

  # Performance benchmarks
  performance-test:
    name: Performance Test
    needs: build-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build analysis image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.analysis
        push: false
        tags: maglogic-analysis:perf
        load: true
    
    - name: Run performance benchmarks
      run: |
        echo "## Docker Performance Benchmarks" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Test container startup time
        echo "Testing container startup time..."
        start_time=$(date +%s%N)
        docker run --rm maglogic-analysis:perf python3 -c "print('Container started')"
        end_time=$(date +%s%N)
        startup_ms=$(( (end_time - start_time) / 1000000 ))
        
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Container startup time | ${startup_ms} ms |" >> $GITHUB_STEP_SUMMARY
        
        # Test import time
        echo "Testing MagLogic import time..."
        import_time=$(docker run --rm maglogic-analysis:perf python3 -c "
import time
start = time.time()
import maglogic
end = time.time()
print(f'{(end-start)*1000:.1f}')
        ")
        
        echo "| MagLogic import time | ${import_time} ms |" >> $GITHUB_STEP_SUMMARY
        
        # Test memory usage
        echo "Testing memory usage..."
        memory_mb=$(docker run --rm maglogic-analysis:perf python3 -c "
import maglogic
import psutil
import os
process = psutil.Process(os.getpid())
memory_mb = process.memory_info().rss / 1024 / 1024
print(f'{memory_mb:.1f}')
        ")
        
        echo "| Memory usage (after import) | ${memory_mb} MB |" >> $GITHUB_STEP_SUMMARY

  # Cleanup old images
  cleanup:
    name: Cleanup
    needs: [build-test, integration-test]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Delete old container images
      uses: actions/delete-package-versions@v4
      with:
        package-name: 'maglogic-analysis'
        package-type: 'container'
        min-versions-to-keep: 10
        delete-only-untagged-versions: true
      continue-on-error: true
    
    - name: Delete old container images (mumax3)
      uses: actions/delete-package-versions@v4
      with:
        package-name: 'maglogic-mumax3'
        package-type: 'container'
        min-versions-to-keep: 10
        delete-only-untagged-versions: true
      continue-on-error: true
    
    - name: Delete old container images (docs)
      uses: actions/delete-package-versions@v4
      with:
        package-name: 'maglogic-docs'
        package-type: 'container'
        min-versions-to-keep: 10
        delete-only-untagged-versions: true
      continue-on-error: true