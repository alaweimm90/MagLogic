name: MagLogic CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Linting
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy bandit safety isort
        pip install -e python/
    
    - name: Run black (code formatting)
      run: black --check --diff python/
    
    - name: Run isort (import sorting)
      run: isort --check-only --diff python/
    
    - name: Run flake8 (linting)
      run: flake8 python/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run mypy (type checking)
      run: mypy python/maglogic --ignore-missing-imports
      continue-on-error: true  # Type checking is not blocking for now
    
    - name: Run bandit (security linting)
      run: bandit -r python/maglogic -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-results
        path: bandit-report.json

  # Unit Tests
  test:
    name: Unit Tests
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for non-main branches
          - os: windows-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.9'
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/Library/Caches/pip
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libhdf5-dev pkg-config
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install hdf5 pkg-config
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install pytest pytest-cov pytest-xdist coverage
        pip install -e python/[dev]
    
    - name: Create test data directory
      run: mkdir -p test_data
    
    - name: Run tests
      run: |
        cd python
        pytest tests/ -v --cov=maglogic --cov-report=xml --cov-report=html --junitxml=junit.xml
      env:
        PYTHONPATH: ${{ github.workspace }}/python
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == env.PYTHON_VERSION
      uses: codecov/codecov-action@v3
      with:
        file: python/coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          python/junit.xml
          python/htmlcov/
          python/coverage.xml

  # Integration Tests
  integration-test:
    name: Integration Tests
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e python/[dev]
    
    - name: Create test simulation files
      run: |
        mkdir -p test_simulations
        # Create simple test OVF file
        python -c "
import numpy as np
from pathlib import Path

# Create minimal OVF file for testing
ovf_content = '''# OOMMF OVF 2.0
# Segment count: 1
# Begin: Segment
# Begin: Header
# Title: Test magnetization
# meshtype: rectangular
# meshunit: m
# xnodes: 10
# ynodes: 10
# znodes: 1
# xstepsize: 1e-9
# ystepsize: 1e-9
# zstepsize: 1e-9
# xmin: 0
# ymin: 0
# zmin: 0
# xmax: 9e-9
# ymax: 9e-9
# zmax: 0
# valuedim: 3
# valueunit: A/m
# valuemultiplier: 8.6e5
# End: Header
# Begin: Data Text
'''

# Add magnetization data
for i in range(100):  # 10x10 grid
    ovf_content += f'{1.0} {0.0} {0.0}\n'

ovf_content += '# End: Data Text\n# End: Segment\n'

Path('test_simulations/test.ovf').write_text(ovf_content)
        "
    
    - name: Run integration tests
      run: |
        python -c "
from maglogic.parsers import OOMMFParser
from maglogic.analysis.magnetization import MagnetizationAnalyzer
from pathlib import Path

print('Running integration test...')

# Test parser
parser = OOMMFParser()
data = parser.parse_ovf('test_simulations/test.ovf')
print(f'Parsed OVF: {data[\"metadata\"][\"grid_size\"]}')

# Test analyzer
analyzer = MagnetizationAnalyzer()
results = analyzer.analyze_ovf_file('test_simulations/test.ovf')
print(f'Analysis complete: {len(results)} sections')

print('Integration test passed!')
        "

  # Docker Build Tests
  docker-test:
    name: Docker Build
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: [
          'docker/Dockerfile.analysis',
          'docker/Dockerfile.docs'
        ]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        push: false
        tags: maglogic-test:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        case "${{ matrix.dockerfile }}" in
          *analysis*)
            docker run --rm maglogic-test:latest python3 -c "import maglogic; print('MagLogic analysis image OK')"
            ;;
          *docs*)
            docker run --rm maglogic-test:latest python3 -c "import sphinx; import maglogic; print('MagLogic docs image OK')"
            ;;
        esac

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Documentation Build
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e python/[docs]
    
    - name: Build documentation
      run: |
        cd docs
        sphinx-build -b html . _build/html -W
    
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: documentation
        path: docs/_build/html/

  # Performance Benchmarks
  benchmark:
    name: Performance Benchmarks
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest-benchmark
        pip install -e python/[dev]
    
    - name: Run benchmarks
      run: |
        cd python
        pytest tests/benchmarks/ --benchmark-json=benchmark.json
      continue-on-error: true
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: python/benchmark.json

  # Release
  release:
    name: Release
    needs: [lint, test, integration-test, docker-test, docs]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        cd python
        python -m build
    
    - name: Check package
      run: |
        cd python
        python -m twine check dist/*
    
    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: MagLogic v${{ steps.version.outputs.VERSION }}
        body: |
          ## MagLogic v${{ steps.version.outputs.VERSION }}
          
          ### Features
          - Comprehensive nanomagnetic logic simulation suite
          - OOMMF and MuMax3 integration
          - Advanced magnetization analysis
          - Docker containerization
          
          ### Installation
          ```bash
          pip install maglogic
          ```
          
          ### Docker Images
          ```bash
          docker pull maglogic/analysis:v${{ steps.version.outputs.VERSION }}
          docker pull maglogic/mumax3:v${{ steps.version.outputs.VERSION }}
          ```
        draft: false
        prerelease: contains(github.ref, 'rc') || contains(github.ref, 'beta') || contains(github.ref, 'alpha')
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        cd python
        python -m twine upload dist/*
      if: env.TWINE_PASSWORD != ''

  # Docker Release
  docker-release:
    name: Docker Release
    needs: [release]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        image: [analysis, mumax3, docs]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: env.DOCKER_USERNAME != '' && env.DOCKER_PASSWORD != ''
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.${{ matrix.image }}
        push: true
        tags: |
          maglogic/${{ matrix.image }}:latest
          maglogic/${{ matrix.image }}:v${{ steps.version.outputs.VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
      if: env.DOCKER_USERNAME != '' && env.DOCKER_PASSWORD != ''
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  # Deployment Status
  deploy-status:
    name: Deployment Status
    needs: [release, docker-release]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Report deployment status
      run: |
        echo "## MagLogic Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| PyPI Package | ${{ needs.release.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Images | ${{ needs.docker-release.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Version: ${GITHUB_REF#refs/tags/v}" >> $GITHUB_STEP_SUMMARY