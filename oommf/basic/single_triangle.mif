# MIF 2.1
# Basic Single Triangle Simulation
# Fundamental study of equilateral permalloy triangle
# Author: Dr. Meshal Alawein <meshal@berkeley.edu>
# Based on: M. Alawein et al., IEEE Mag. Lett. 2019

set PI [expr 4*atan(1.0)]
set MU0 [expr 4*$PI*1e-7]

# Simulation parameters with defaults that can be overridden
Parameter edge_length 100e-9       ;# Triangle edge length (m)
Parameter thickness 10e-9          ;# Triangle thickness (m)
Parameter temperature 0.0          ;# Temperature (K, 0 = no thermal effects)
Parameter applied_field 0.0        ;# Applied field strength (A/m)
Parameter field_angle 0.0          ;# Applied field angle (degrees)
Parameter final_time 5e-9          ;# Total simulation time (s)
Parameter time_step 1e-12          ;# Time step (s)

# Material parameters (Permalloy Ni80Fe20)
Parameter Ms 860e3                 ;# Saturation magnetization (A/m)
Parameter A_ex 13e-12             ;# Exchange constant (J/m)
Parameter K1 0                    ;# First-order anisotropy (J/m³)
Parameter alpha 0.01              ;# Gilbert damping parameter
Parameter gamma_ll 2.211e5        ;# Gyromagnetic ratio (m/A·s)

# Mesh parameters
Parameter cell_size 2e-9          ;# Mesh cell size (m)

# Output parameters
Parameter output_step 100e-12     ;# Magnetization output interval (s)
Parameter table_step 10e-12       ;# Data table output interval (s)

# Calculate triangle geometry parameters
set tri_height [expr $edge_length * sqrt(3) / 2.0]
set tri_center_y [expr $tri_height / 3.0]

# Define simulation region (slightly larger than triangle)
set region_x [expr $edge_length * 1.2]
set region_y [expr $tri_height * 1.2]

Specify Oxs_BoxAtlas:atlas {
  xrange [list [expr -$region_x/2] [expr $region_x/2]]
  yrange [list [expr -$region_y/2] [expr $region_y/2]]
  zrange [list 0 $thickness]
}

# Define triangular shape using script atlas
Specify Oxs_ScriptAtlas:triangle {
  xrange [list [expr -$region_x/2] [expr $region_x/2]]
  yrange [list [expr -$region_y/2] [expr $region_y/2]]
  zrange [list 0 $thickness]
  regions { triangle background }
  script_args { relpt }
  script {
    foreach {x y z} $relpt break
    
    # Convert relative coordinates to absolute
    set x_abs [expr $x * $region_x - $region_x/2]
    set y_abs [expr $y * $region_y - $region_y/2]
    
    # Check if point is inside equilateral triangle
    # Triangle vertices: (-edge_length/2, -tri_center_y), (edge_length/2, -tri_center_y), (0, 2*tri_center_y)
    
    # Use barycentric coordinates for point-in-triangle test
    set v0_x 0
    set v0_y [expr 2*$tri_center_y]
    set v1_x [expr -$edge_length/2]
    set v1_y [expr -$tri_center_y]
    set v2_x [expr $edge_length/2]
    set v2_y [expr -$tri_center_y]
    
    # Barycentric coordinate calculation
    set denom [expr ($v1_y - $v2_y)*($v0_x - $v2_x) + ($v2_x - $v1_x)*($v0_y - $v2_y)]
    
    if {abs($denom) < 1e-15} {
      return "background"
    }
    
    set a [expr (($v1_y - $v2_y)*($x_abs - $v2_x) + ($v2_x - $v1_x)*($y_abs - $v2_y)) / $denom]
    set b [expr (($v2_y - $v0_y)*($x_abs - $v2_x) + ($v0_x - $v2_x)*($y_abs - $v2_y)) / $denom]
    set c [expr 1 - $a - $b]
    
    # Point is inside triangle if all barycentric coordinates are non-negative
    if {$a >= 0 && $b >= 0 && $c >= 0} {
      return "triangle"
    } else {
      return "background"
    }
  }
}

# Mesh specification
Specify Oxs_RectangularMesh:mesh {
  cellsize [list $cell_size $cell_size $thickness]
  atlas :triangle
}

# Material properties
Specify Oxs_UniformExchange:exchange {
  A $A_ex
}

# Demag field (magnetostatic energy)
Specify Oxs_Demag:demag {}

# Uniaxial anisotropy (if K1 != 0)
if {$K1 != 0} {
  Specify Oxs_UniaxialAnisotropy:anisotropy {
    K1 $K1
    axis {0 0 1}  ;# Easy axis along z
  }
}

# Applied field (if non-zero)
if {$applied_field != 0} {
  set field_x [expr $applied_field * cos($field_angle * $PI / 180.0)]
  set field_y [expr $applied_field * sin($field_angle * $PI / 180.0)]
  set field_z 0
  
  Specify Oxs_FixedZeeman:applied_field {
    field [list $field_x $field_y $field_z]
  }
}

# Thermal fluctuations (if temperature > 0)
if {$temperature > 0} {
  set k_B 1.38064852e-23
  set thermal_field [expr sqrt(2*$alpha*$k_B*$temperature*$gamma_ll*$Ms)]
  
  Specify Oxs_UZeeman:thermal {
    multiplier $thermal_field
    Hrange {
      { 0 0 0 0 0 0 0 }
    }
  }
}

# Time evolution driver
Specify Oxs_TimeDriver:driver {
  evolver Oxs_RungeKutta4:evolver
  stopping_time $final_time
  mesh :mesh
  Ms { Oxs_AtlasScalarField {
    atlas :triangle
    default_value 0
    values {
      triangle $Ms
    }
  }}
  m0 { Oxs_RandomVectorField {
    min_norm 1.0
    max_norm 1.0
  }}
}

# Energy terms for the driver
Specify Oxs_RungeKutta4:evolver {
  alpha $alpha
  gamma_ll $gamma_ll
  min_timestep 1e-15
  max_timestep $time_step
}

# Output schedules
Schedule DataTable Stage 1
Schedule Oxs_TimeDriver::Magnetization Stage [expr int($output_step / $time_step)]

# Data table outputs
Destination table mmArchive
Destination magnetization mmArchive

# Additional data columns
Schedule Oxs_Demag::Field Stage [expr int($output_step / $time_step)]
Schedule Oxs_UniformExchange::Field Stage [expr int($output_step / $time_step)]

# Data table configuration
Specify Oxs_TimeDriver:evolver {
  basename single_triangle
  scalar_field_output_format binary 8
  vector_field_output_format binary 8
}

# Add energy outputs to data table
proc custom_output { args } {
  global PI MU0 Ms edge_length thickness
  
  # Calculate volume
  set area [expr $edge_length * $edge_length * sqrt(3) / 4.0]
  set volume [expr $area * $thickness]
  
  # Get current time
  set time [Oxs_OutputGet :driver time]
  
  # Get total energy
  set total_energy [Oxs_OutputGet :driver "Total energy"]
  set energy_density [expr $total_energy / $volume]
  
  # Get average magnetization
  set avg_mx [Oxs_OutputGet :driver "Average m_x"]
  set avg_my [Oxs_OutputGet :driver "Average m_y"] 
  set avg_mz [Oxs_OutputGet :driver "Average m_z"]
  
  # Calculate magnetization magnitude
  set m_mag [expr sqrt($avg_mx*$avg_mx + $avg_my*$avg_my + $avg_mz*$avg_mz)]
  
  # Calculate magnetization angle
  set m_angle [expr atan2($avg_my, $avg_mx) * 180.0 / $PI]
  
  return [list $time $total_energy $energy_density $avg_mx $avg_my $avg_mz $m_mag $m_angle]
}

# Schedule custom output
Specify Oxs_TimeDriver:driver {
  stage_count 1
}

# Comments and documentation
# This simulation studies a single equilateral permalloy triangle, which is the
# fundamental building block for nanomagnetic logic (NML) devices. The triangle
# exhibits six stable magnetic states due to shape anisotropy:
# - Three "Y-states" with magnetization along triangle edges
# - Three "vortex states" with circulation around the triangle center
#
# Key physics:
# 1. Shape anisotropy dominates over magnetocrystalline anisotropy
# 2. Exchange energy favors uniform magnetization
# 3. Magnetostatic energy creates effective easy axes along triangle edges
# 4. Thermal fluctuations can induce state transitions
#
# This simulation can be used to:
# - Study magnetic state stability
# - Calculate energy barriers between states
# - Analyze switching dynamics under applied fields
# - Investigate thermal activation effects