[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "maglogic"
version = "1.0.0"
description = "Nanomagnetic Logic Simulation Suite for Computational Magnetism"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Meshal Alawein", email = "meshal@berkeley.edu"},
]
maintainers = [
    {name = "Meshal Alawein", email = "meshal@berkeley.edu"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Visualization",
]
keywords = [
    "micromagnetism",
    "nanomagnetic logic", 
    "computational physics",
    "OOMMF",
    "MuMax3",
    "spintronics",
    "cellular automata",
    "magnetic simulation",
    "scientific computing"
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "matplotlib>=3.5.0",
    "pandas>=1.3.0",
    "h5py>=3.2.0",
    "pillow>=8.3.0",
    "pyyaml>=5.4.0",
    "click>=8.0.0",
    "tqdm>=4.61.0",
    "plotly>=5.0.0",
    "jupyter>=1.0.0",
    "ipywidgets>=7.6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.2.0",
    "pytest-cov>=2.12.0",
    "pytest-mock>=3.6.0",
    "black>=21.0.0",
    "flake8>=3.9.0",
    "mypy>=0.910",
    "pre-commit>=2.13.0",
    "bandit>=1.7.0",
    "safety>=1.10.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=0.5.0",
    "myst-parser>=0.15.0",
    "sphinx-autodoc-typehints>=1.12.0",
    "nbsphinx>=0.8.0",
]
ml = [
    "scikit-learn>=1.0.0",
    "torch>=1.9.0",
    "tensorflow>=2.6.0",
]
gui = [
    "PyQt5>=5.15.0",
    "tkinter-page>=0.1.0",
]
hpc = [
    "mpi4py>=3.1.0",
    "dask[complete]>=2021.6.0",
]
all = [
    "pytest>=6.2.0",
    "pytest-cov>=2.12.0",
    "black>=21.0.0",
    "sphinx>=4.0.0",
    "scikit-learn>=1.0.0",
    "PyQt5>=5.15.0",
    "mpi4py>=3.1.0",
]

[project.urls]
Homepage = "https://github.com/alaweimm90/MagLogic"
Documentation = "https://alaweimm90.github.io/MagLogic/"
Repository = "https://github.com/alaweimm90/MagLogic"
Website = "https://malawein.com"
LinkedIn = "https://www.linkedin.com/in/meshal-alawein"
Research = "https://simcore.dev"
"Bug Reports" = "https://github.com/alaweimm90/MagLogic/issues"
"Research Paper" = "https://doi.org/10.1109/LMAG.2019.2912398"

[project.scripts]
maglogic = "maglogic.cli:main"
maglogic-convert = "maglogic.scripts.convert_formats:main"
maglogic-analyze = "maglogic.scripts.batch_analysis:main"
maglogic-gui = "maglogic.gui.maglogic_dashboard:main"

[tool.setuptools]
packages = ["maglogic"]
package-dir = {"" = "python"}
include-package-data = true

[tool.setuptools.package-data]
maglogic = [
    "data/*.json",
    "data/*.yaml", 
    "style/*.json",
    "style/*.mplstyle",
    "templates/*.template"
]

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["maglogic"]
known_third_party = [
    "numpy", "scipy", "matplotlib", "pandas", "plotly", 
    "jupyter", "sklearn", "torch", "tensorflow"
]

# MyPy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "mayavi.*",
    "vtk.*", 
    "mpi4py.*",
    "h5py.*",
    "plotly.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=maglogic",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
testpaths = ["python/tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU",
    "oommf: marks tests that require OOMMF installation",
    "mumax3: marks tests that require MuMax3 installation",
    "integration: marks tests as integration tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["maglogic"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
max-complexity = 10
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".tox",
    ".venv",
    "venv",
]

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "*/tests/*"]
skips = ["B101", "B601"]  # Skip assert and shell injection warnings in specific contexts